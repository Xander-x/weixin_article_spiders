{"title":"\r\n                        Node.js 命令行程序开发教程                    ","summary":"最近，Npm的网志有一组系列文章，我觉得写得非常好。下面就是我在它的基础上扩展的教程，应该是目前最好的解决方案了。一、可执行脚本我们从最简单的讲起。首先，使用 JavaScript 语言，写一个可执行脚本 hello 。","author":"ThinkPHP","time":"2015-07-20","entry":[{"content":"\r\n                                功能介绍\r\n                                开源WEB应用开发框架ThinkPHP\r\n                                ","contentType":0,"order":1},{"content":"最近，Npm的网志有一组系列文章，我觉得写得非常好。下面就是我在它的基础上扩展的教程，应该是目前最好的解决方案了。一、可执行脚本我们从最简单的讲起。首先，使用 JavaScript 语言，写一个可执行脚本 hello 。","contentType":0,"order":2},{"content":"然后，修改 hello 的权限。","contentType":0,"order":3},{"content":"现在，hello 就可以执行了。","contentType":0,"order":4},{"content":"如果想把 hello 前面的路径去除，可以将 hello 的路径加入环境变量 PATH。但是，另一种更好的做法，是在当前目录下新建 package.json ，写入下面的内容。","contentType":0,"order":5},{"content":"然后执行 npm link 命令。","contentType":0,"order":6},{"content":"现在再执行 hello ，就不用输入路径了。","contentType":0,"order":7},{"content":"二、命令行参数的原始写法命令行参数可以用系统变量 process.argv 获取。","contentType":0,"order":8},{"content":"执行时，直接在脚本文件后面，加上参数即可。","contentType":0,"order":9},{"content":"三、新建进程脚本可以通过 child_process 模块新建子进程，从而执行 Unix 系统命令。","contentType":0,"order":10},{"content":"用法如下。","contentType":0,"order":11},{"content":"四、shelljs 模块shelljs 模块重新包装了 child_process，调用系统命令更加方便。它需要安装后使用。","contentType":0,"order":12},{"content":"然后，改写脚本。","contentType":0,"order":13},{"content":"上面代码是 shelljs 的本地模式，即通过 exec 方法执行 shell 命令。此外还有全局模式，允许直接在脚本中写 shell 命令。","contentType":0,"order":14},{"content":"五、yargs 模块shelljs 只解决了如何调用 shell 命令，而 yargs 模块能够解决如何处理命令行参数。它也需要安装。","contentType":0,"order":15},{"content":"yargs 模块提供 argv 对象，用来读取命令行参数。请看改写后的 hello 。","contentType":0,"order":16},{"content":"使用时，下面两种用法都可以。","contentType":0,"order":17},{"content":"如果将 argv.name 改成 argv.n，就可以使用一个字母的短参数形式了。","contentType":0,"order":18},{"content":"可以使用 alias 方法，指定 name 是 n 的别名。","contentType":0,"order":19},{"content":"这样一来，短参数和长参数就都可以使用了。","contentType":0,"order":20},{"content":"argv 对象有一个下划线（_）属性，可以获取非连词线开头的参数。","contentType":0,"order":21},{"content":"用法如下。","contentType":0,"order":22},{"content":"六、命令行参数的配置yargs 模块还提供3个方法，用来配置命令行参数。","contentType":0,"order":23},{"content":"demand：是否必选","contentType":0,"order":24},{"content":"default：默认值","contentType":0,"order":25},{"content":"describe：提示","contentType":0,"order":26},{"content":"上面代码指定 n 参数不可省略，默认值为 tom，并给出一行提示。options 方法允许将所有这些配置写进一个对象。","contentType":0,"order":27},{"content":"有时，某些参数不需要值，只起到一个开关作用，这时可以用 boolean 方法指定这些参数返回布尔值。","contentType":0,"order":28},{"content":"上面代码中，参数 n 总是返回一个布尔值，用法如下。","contentType":0,"order":29},{"content":"boolean 方法也可以作为属性，写入 option 对象。","contentType":0,"order":30},{"content":"七、帮助信息yargs 模块提供以下方法，生成帮助信息。","contentType":0,"order":31},{"content":"usage：用法格式","contentType":0,"order":32},{"content":"example：提供例子","contentType":0,"order":33},{"content":"help：显示帮助信息","contentType":0,"order":34},{"content":"epilog：出现在帮助信息的结尾","contentType":0,"order":35},{"content":"执行结果如下。","contentType":0,"order":36},{"content":"八、子命令yargs 模块还允许通过 command 方法，设置 Git 风格的子命令。","contentType":0,"order":37},{"content":"用法如下。","contentType":0,"order":38},{"content":"可以将这个功能与 shellojs 模块结合起来。","contentType":0,"order":39},{"content":"每个子命令往往有自己的参数，这时就需要在回调函数中单独指定。回调函数中，要先用 reset 方法重置 yargs 对象。","contentType":0,"order":40},{"content":"用法如下。","contentType":0,"order":41},{"content":"九、其他事项（1）返回值根据 Unix 传统，程序执行成功返回 0，否则返回 1 。","contentType":0,"order":42},{"content":"（2）重定向Unix 允许程序之间使用管道重定向数据。","contentType":0,"order":43},{"content":"脚本可以通过监听标准输入的data 事件，获取重定向的数据。","contentType":0,"order":44},{"content":"下面是用法：","contentType":0,"order":45},{"content":"（3）系统信号操作系统可以向执行中的进程发送信号，process 对象能够监听信号事件。","contentType":0,"order":46},{"content":"发送信号的方法如下。","contentType":0,"order":47},{"content":"\r\n                            赞赏\r\n                        ","contentType":0,"order":48},{"content":"长按二维码向我转账","contentType":0,"order":49},{"content":"受苹果公司新规定影响，微信 iOS 版的赞赏功能被关闭，可通过二维码转账支持公众号。","contentType":0,"order":50}]}